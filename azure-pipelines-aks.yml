# Maven package Java project Web App to Linux on Azure
# Build your Java project and deploy it to Azure as a Linux web app
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

variables:

  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: '04ce349a-dbbc-4b7c-b447-0986b05c2b2c'
  
  # Web app name
  webAppName: 'azure-devops-training-java1'

  # Environment name
  environmentName: 'azure-devops-training-java1'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  workingDirectory: 'apps/gs-spring-boot'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: MavenPackageAndPublishArtifacts
    displayName: Maven Package and Publish Artifacts
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - task: Maven@3
      inputs:
        mavenPomFile: '$(system.defaultWorkingDirectory)/apps/gs-spring-boot/pom.xml'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        codeCoverageToolOption: 'JaCoCo'
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
        checkStyleRunAnalysis: true
        pmdRunAnalysis: true
    - task: Maven@3
      displayName: 'Maven Package'
      inputs:
        mavenPomFile: '$(system.defaultWorkingDirectory)/apps/gs-spring-boot/pom.xml'


    - task: CopyFiles@2
      displayName: 'Copy Files to artifact staging directory'
      inputs:
        SourceFolder: 'apps/gs-spring-boot'
        Contents: '**/target/*.?(war|jar)'
        TargetFolder: $(Build.ArtifactStagingDirectory)

    - upload: $(Build.ArtifactStagingDirectory)
      artifact: drop

